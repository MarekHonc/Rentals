@model Rentals.Web.Areas.Admin.Models.ItemTypeEditorViewModel
@using Rentals.Web.Localization
@using Rentals.Common.Extensions

@{
	ViewBag.Title = Admin.Item;
}

<div class="row">
	<h2>@Admin.Item_Create</h2>
</div>

<div class="row">
	<div class="col-md-6">
		@using (Html.BeginForm("Create", "Items", FormMethod.Post, new { id = "create-form" }))
		{
			@Html.ValidationSummary(true)
			<div class="form-group">
				@Html.LabelFor(m => m.Name, new { @class = "control-label" })
				@Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
				@Html.ValidationMessageFor(m => m.Name, string.Empty, new { @class = "text-danger" })
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.NumberOfItems, new { @class = "control-label" })
				@Html.TextBoxFor(m => m.NumberOfItems, new { @class = "form-control" })
				@Html.ValidationMessageFor(m => m.NumberOfItems, string.Empty, new { @class = "text-danger" })
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.Description, new { @class = "control-label" })
				@Html.TextBoxFor(m => m.Description, new { @class = "form-control" })
			</div>
			<div class="form-group">
				@Html.HiddenFor(m => m.CoverImage)
				<label for="file">@Admin.Item_CoverImage</label>

				@if (Model.CoverImage.IsNullOrEmpty())
				{
					<input id="file" type="file" size="1" onchange="uploadFile('file', OnSuccess, OnFailure)" />
					<p style="display: none;" id="summary" class="text-success">@Admin.Item_FileUploaded</p>

					<script type="text/javascript">
						function OnSuccess(data) {
							$("#@Html.IdFor(m => m.CoverImage)").val(data);
							$("#file").hide();
							$("#summary").show();
						}

						function OnFailure(data) {
							alert(data.responseText);
						}
					</script>
				}
				else
				{
					<p class="text-success">@Admin.Item_FileUploaded</p>
				}
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.Accessories, new { @class = "control-label" })
				<div class="row">
					<div class="btn-group col-xs-12">
						<button type="button" class="btn btn-default btn dropdown-toggle col-xs-12" data-toggle="dropdown" disabled="disabled">
							<p class="pull-left margin-0">@Admin.Item_ChooseAccessory</p>
							<p class="pull-right margin-0"><span class="caret"></span></p>
						</button>
						<ul class="dropdown-menu accessory-list col-xs-12"></ul>
					</div>
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.AccessoryTo, new { @class = "control-label" })
				<div class="row">
					<div class="btn-group col-xs-12">
						<button type="button" class="btn btn-default btn dropdown-toggle col-xs-12" data-toggle="dropdown" disabled="disabled">
							<p class="pull-left margin-0">@Admin.Item_ChooseAccessoryTo</p>
							<p class="pull-right margin-0"><span class="caret"></span></p>
						</button>
						<ul class="dropdown-menu accessory-to-list col-xs-12"></ul>
					</div>
				</div>
			</div>

			<div class="form-group">
				<button type="submit" class="btn btn-primary">@GlobalResources.Save</button>
			</div>
		}

		<script type="text/javascript">
			var accessorries =  @Html.Raw(Json.Serialize(Model.Accessories)) || [];
			var accessoryTo = @Html.Raw(Json.Serialize(Model.AccessoryTo)) || [];

			$(document).ready(function () {
				$("#create-form").submit(function (event) {
					$(accessorries).each(function (index, value) {
						$("#create-form").append('<input type="hidden" name="Accessories[' + index + ']" value="' + value + '">');
					});
					$(accessoryTo).each(function (index, value) {
						$("#create-form").append('<input type="hidden" name="AccessoryTo[' + index + ']" value="' + value + '">');
					});

				});

				$.ajax({
					url: '@Url.Action("GetItemTypes", "Items")',
					success: function (data) {
						$(".dropdown-toggle").removeAttr("disabled");

						$(data).each(function (index, value) {
							render($(".accessory-list"), accessorries, accessoryTo, value);
							render($(".accessory-to-list"), accessoryTo, accessorries, value);
						})

						$('.accessory-list a').on('click', function (event) {
							return setValue(event, accessorries, $(".accessory-to-list"));
						});

						$('.accessory-to-list a').on('click', function (event) {
							return setValue(event, accessoryTo, $(".accessory-list"));
						});
					}
				})
			});

			function render($elem, checked, disabled, item) {
				$elem.append(
					'<li><a href="#" data-value="' + item.id +
					'" tabIndex=" - 1"><input type="checkbox"' +
					(checked.includes(item.id) ? 'checked="checked"' : '') +
					(disabled.includes(item.id) ? 'disabled' : '') +
					'/>&nbsp;' + item.name + '</a></li>'
				);
			}

			function setValue(event, fieldToAdd, $whereToDisable) {
				var $target = $(event.currentTarget);
				var val = Number($target.attr('data-value'));
				var $inp = $target.find('input');
				var idx;

				if ($inp.is(":disabled"))
					return false;

				if ((idx = fieldToAdd.indexOf(val)) > -1) {
					fieldToAdd.splice(idx, 1);
					$inp.prop('checked', false);
					$whereToDisable.find("[data-value='" + val + "']").find("input").removeAttr("disabled");
				} else {
					fieldToAdd.push(val);
					$inp.prop('checked', true);
					$whereToDisable.find("[data-value='" + val + "']").find("input").attr("disabled", true);
				}

				return false;
			}
		</script>

	</div>
</div>